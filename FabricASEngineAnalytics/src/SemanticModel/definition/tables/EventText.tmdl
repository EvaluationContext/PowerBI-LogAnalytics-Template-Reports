table EventText
	lineageTag: 339f4188-8b84-4ecb-9882-43867f3a2924

	refreshPolicy
		policyType: basic
		rollingWindowGranularity: month
		rollingWindowPeriods: 2
		incrementalGranularity: day
		incrementalPeriods: 2
		incrementalPeriodsOffset: -1
		sourceExpression =
			let
			RangeStartTime = DateTime.ToText(RangeStart,[Format="yyyy-MM-dd'T'HH:mm:ss'Z'", Culture="en-US"]),
			RangeEndTime = DateTime.ToText(RangeEnd,[Format="yyyy-MM-dd'T'HH:mm:ss'Z'", Culture="en-US"]),
			Source = AzureDataExplorer.Contents(
				#"Azure Log Analytics Path"
				, #"Azure Log Analytics Workspace Name"
				,"
				set notruncation;
				set ClientRequestIdPrefix='BYOLA ExecutionMetrics';
				let RangeStartTime = todatetime('" & RangeStartTime & "');
				let RangeEndTime = todatetime('" & RangeEndTime & "');
				let dbid = '"& _ArtifactId &"';
				let wkspid = '"& _WorkspaceId &"';
				let window =
					PowerBIDatasetsWorkspace
					| extend TimeGenerated=TimeGenerated+"& Number.ToText(#"UTC Offset Hours") &"h
					| where TimeGenerated >=RangeStartTime-7h and TimeGenerated <RangeEndTime+15m // extra time to allow window for query and command operations linked to execution metric, that span multiple days (i.e. over midnight)
					| where XmlaRequestId != '00000000-0000-0000-0000-000000000000'
					| parse XmlaProperties with * '<DbpropMsmdRequestID>' RequestID '</DbpropMsmdRequestID>' *
					| parse kind=regex flags=Ui XmlaProperties with '(.?)[a-zA-Z]*<SspropInitAppName>' RequestApp '<' *
					;
				let ExecutionMetrics =
					materialize(
						window
						| where TimeGenerated >=RangeStartTime and TimeGenerated <RangeEndTime
						| where LogAnalyticsCategory  == 'Execution Metrics'
						| project XmlaRequestId, CorrelationId
					)
					;
				let semanticmodel=
					materialize(
						window
						| where ArtifactId != ''
						| summarize arg_max(TimeGenerated, ArtifactId, ArtifactName, PowerBIWorkspaceId, PowerBIWorkspaceName, PremiumCapacityId) by XmlaRequestId
						| where PowerBIWorkspaceId has wkspid and ArtifactId has dbid
					)
					;
				let queryOperations =
					window
					| project XmlaRequestId, EventText, OperationName, OperationDetailName, RequestApp
					| where EventText != ''
					| where OperationName == 'QueryEnd' and OperationDetailName !='ExtAuth'
					| where RequestApp !in ('PowerBIEIM', 'Data Loss Prevention Scan') and not(EventText has_any ('<Discover', '<Cancel', '<BeginTransaction', '<RollbackTransaction', '>Trace<')) and OperationDetailName !='CommitTransaction'
					| join kind=inner semanticmodel on XmlaRequestId
					| join kind=leftsemi ExecutionMetrics on XmlaRequestId // queries not linked to ExecutionMetrics on CorrelationId
					| project XmlaRequestId, EventText
					;
				let commandOperations =
					window
					| project XmlaRequestId, CorrelationId, EventText, OperationName, OperationDetailName, RequestApp
					| where EventText != ''
					| where OperationName == 'CommandEnd' and OperationDetailName !='ExtAuth'
					| where RequestApp !in ('PowerBIEIM', 'Data Loss Prevention Scan') and not(EventText has_any ('<Discover', '<Cancel', '<BeginTransaction', '<RollbackTransaction', '>Trace<')) and OperationDetailName !='CommitTransaction'
					| join kind=inner semanticmodel on XmlaRequestId
					| join kind=leftsemi ExecutionMetrics on XmlaRequestId and CorrelationId // commands are linked to ExecutionMetrics on CorrelationId
					| project XmlaRequestId, EventText
					;
				union queryOperations, commandOperations
				| summarize EventText = max(EventText) by XmlaRequestId
				// | extend EventTextHash=hash_md5(EventText) //  Hash is redundant
				| project XmlaRequestId, EventText //, EventTextHash
				"
				,[MaxRows=null, MaxSize=null, NoTruncate=true, AdditionalSetStatements=null]
			)
			in Source

	column XmlaRequestId
		dataType: string
		isHidden
		lineageTag: d767d976-d74c-49fc-bb5e-3c69901f176c
		summarizeBy: none
		sourceColumn: XmlaRequestId

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	column EventText
		dataType: string
		lineageTag: b11511b0-c18e-4675-b7ac-d30f8f80b509
		summarizeBy: none
		sourceColumn: EventText

		annotation SummarizationSetBy = Automatic

	partition EventText = m
		mode: import
		queryGroup: 'Log Analytics'
		source =
				let
				RangeStartTime = DateTime.ToText(RangeStart,[Format="yyyy-MM-dd'T'HH:mm:ss'Z'", Culture="en-US"]),
				RangeEndTime = DateTime.ToText(RangeEnd,[Format="yyyy-MM-dd'T'HH:mm:ss'Z'", Culture="en-US"]),
				Source = AzureDataExplorer.Contents(
					#"Azure Log Analytics Path"
					, #"Azure Log Analytics Workspace Name"
					,"
					set notruncation;
					set ClientRequestIdPrefix='BYOLA ExecutionMetrics';
					let RangeStartTime = todatetime('" & RangeStartTime & "');
					let RangeEndTime = todatetime('" & RangeEndTime & "');
					let dbid = '"& _ArtifactId &"';
					let wkspid = '"& _WorkspaceId &"';
					let window =
						PowerBIDatasetsWorkspace
						| extend TimeGenerated=TimeGenerated+"& Number.ToText(#"UTC Offset Hours") &"h
						| where TimeGenerated >=RangeStartTime-7h and TimeGenerated <RangeEndTime+15m // extra time to allow window for query and command operations linked to execution metric, that span multiple days (i.e. over midnight)
						| where XmlaRequestId != '00000000-0000-0000-0000-000000000000'
						| parse XmlaProperties with * '<DbpropMsmdRequestID>' RequestID '</DbpropMsmdRequestID>' *
						| parse kind=regex flags=Ui XmlaProperties with '(.?)[a-zA-Z]*<SspropInitAppName>' RequestApp '<' *
						;
					let ExecutionMetrics =
						materialize(
							window
							| where TimeGenerated >=RangeStartTime and TimeGenerated <RangeEndTime
							| where LogAnalyticsCategory  == 'Execution Metrics'
							| project XmlaRequestId, CorrelationId
						)
						;
					let semanticmodel=
						materialize(
							window
							| where ArtifactId != ''
							| summarize arg_max(TimeGenerated, ArtifactId, ArtifactName, PowerBIWorkspaceId, PowerBIWorkspaceName, PremiumCapacityId) by XmlaRequestId
							| where PowerBIWorkspaceId has wkspid and ArtifactId has dbid
						)
						;
					let queryOperations =
						window
						| project XmlaRequestId, EventText, OperationName, OperationDetailName, RequestApp
						| where EventText != ''
						| where OperationName == 'QueryEnd' and OperationDetailName !='ExtAuth'
						| where RequestApp !in ('PowerBIEIM', 'Data Loss Prevention Scan') and not(EventText has_any ('<Discover', '<Cancel', '<BeginTransaction', '<RollbackTransaction', '>Trace<')) and OperationDetailName !='CommitTransaction'
						| join kind=inner semanticmodel on XmlaRequestId
						| join kind=leftsemi ExecutionMetrics on XmlaRequestId // queries not linked to ExecutionMetrics on CorrelationId
						| project XmlaRequestId, EventText
						;
					let commandOperations =
						window
						| project XmlaRequestId, CorrelationId, EventText, OperationName, OperationDetailName, RequestApp
						| where EventText != ''
						| where OperationName == 'CommandEnd' and OperationDetailName !='ExtAuth'
						| where RequestApp !in ('PowerBIEIM', 'Data Loss Prevention Scan') and not(EventText has_any ('<Discover', '<Cancel', '<BeginTransaction', '<RollbackTransaction', '>Trace<')) and OperationDetailName !='CommitTransaction'
						| join kind=inner semanticmodel on XmlaRequestId
						| join kind=leftsemi ExecutionMetrics on XmlaRequestId and CorrelationId // commands are linked to ExecutionMetrics on CorrelationId
						| project XmlaRequestId, EventText
						;
					union queryOperations, commandOperations
					| summarize EventText = max(EventText) by XmlaRequestId
					// | extend EventTextHash=hash_md5(EventText) //  Hash is redundant
					| project XmlaRequestId, EventText //, EventTextHash
					"
					,[MaxRows=null, MaxSize=null, NoTruncate=true, AdditionalSetStatements=null]
				)
				in Source

	annotation PBI_ResultType = Table

	annotation PBI-IsMQueryFoldable = True

